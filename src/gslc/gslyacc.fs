// Implementation file for parser generated by fsyacc
module GSLParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "gslyacc.fsy"

// F# code goes here
open System
open parseTypes
open pragmaTypes
open Amyris.Bio
open constants
// map aliases to parts
let aliases = new Collections.Generic.Dictionary<string,GSLVar>()

// Fold new list of key value pairs into pragmas field of a part
let addPragmas (p:PPP) (newPragmas:Pragma list) =
    let mergedPragmas = p.pr.MergeIn(newPragmas)
    {p with pr = mergedPragmas}

let varRE = System.Text.RegularExpressions.Regex("@[A-Za-z_][A-Za-z0-9_]*")
let aliasReplaceIn (aliases:Collections.Generic.Dictionary<string,GSLVar>) (s:string) =
    let rec replaceOne (vars:string list) (currentString:string) =
        match vars with
            | [] -> currentString
            | hd::tl ->
                // Depending on what type of variable we have, we might format differently,
                // so handle different cases
                let value =
                    match aliases.TryGetValue(hd.Substring(1)) with
                    | true,v -> match v with
                                | GSLV_STR s -> s.i
                                | GSLV_FLOAT f -> string f
                                | GSLV_INT i -> string i
                                | GSLV_PPP ppp ->
                                    match ppp.part with
                                        | GENEPART(gp) -> gp.part.gene
                                        | _  -> failwithf "ERROR: unsupported variable substitution for part %A" ppp.part
                                | _ as x ->
                                    failwithf "ERROR: unsupported variable substitution name=%s value=%A" hd x
                    | _ ->
                        failwithf "Reference to variable '%s' not found in '%s'" (hd.Substring(1)) s
                replaceOne tl (currentString.Replace(hd,value))
    replaceOne [for hit in varRE.Matches(s) -> hit.Value] s


# 48 "gslyacc.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | LPAREN
  | RPAREN
  | PLUS
  | NEWLINE
  | EOF
  | MARKER
  | DOUBLEQUOTE
  | START_ROUGHAGE
  | END_ROUGHAGE
  | GREATERTHAN
  | LESSTHAN
  | DOT
  | LET
  | CUT
  | DEF
  | END
  | OPEN
  | FOR
  | IN
  | DO
  | COLON
  | STAR
  | SLASH
  | AT
  | LBRACE
  | RBRACE
  | EXCLM
  | EQUALS
  | CARAT
  | COMMA
  | HYPHEN
  | TILDE
  | OPENSQBRACKET
  | DOLLAR
  | CLOSESQBRACKET
  | SEMICOLON
  | PNAME of (string)
  | PVALUE of (string)
  | ERROR of (string)
  | DNAMUTATION of (string)
  | AAMUTATION of (string)
  | LINKER of (string)
  | QUOTED_STRING of (IDLoc)
  | DOCSTRING of (IDLoc)
  | STRING of (IDLoc)
  | INT of (int)
  | ID of (string*Position*Position)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_PLUS
    | TOKEN_NEWLINE
    | TOKEN_EOF
    | TOKEN_MARKER
    | TOKEN_DOUBLEQUOTE
    | TOKEN_START_ROUGHAGE
    | TOKEN_END_ROUGHAGE
    | TOKEN_GREATERTHAN
    | TOKEN_LESSTHAN
    | TOKEN_DOT
    | TOKEN_LET
    | TOKEN_CUT
    | TOKEN_DEF
    | TOKEN_END
    | TOKEN_OPEN
    | TOKEN_FOR
    | TOKEN_IN
    | TOKEN_DO
    | TOKEN_COLON
    | TOKEN_STAR
    | TOKEN_SLASH
    | TOKEN_AT
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_EXCLM
    | TOKEN_EQUALS
    | TOKEN_CARAT
    | TOKEN_COMMA
    | TOKEN_HYPHEN
    | TOKEN_TILDE
    | TOKEN_OPENSQBRACKET
    | TOKEN_DOLLAR
    | TOKEN_CLOSESQBRACKET
    | TOKEN_SEMICOLON
    | TOKEN_PNAME
    | TOKEN_PVALUE
    | TOKEN_ERROR
    | TOKEN_DNAMUTATION
    | TOKEN_AAMUTATION
    | TOKEN_LINKER
    | TOKEN_QUOTED_STRING
    | TOKEN_DOCSTRING
    | TOKEN_STRING
    | TOKEN_INT
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_Final
    | NONTERM_HetBlock
    | NONTERM_cExp
    | NONTERM_RelPos1
    | NONTERM_RelPos2
    | NONTERM_Slice
    | NONTERM_Mutation
    | NONTERM_Mod
    | NONTERM_ModList
    | NONTERM_Linker
    | NONTERM_SubPart
    | NONTERM_Part
    | NONTERM_PragmaValues
    | NONTERM_Pragma
    | NONTERM_Pragmas
    | NONTERM_InlinePragmas
    | NONTERM_PartMaybePragma
    | NONTERM_PartFwdRev
    | NONTERM_PartList
    | NONTERM_Assembly
    | NONTERM_DocstringSection
    | NONTERM_GSLVarsCommaSep
    | NONTERM_AliasLine
    | NONTERM_GSLVar
    | NONTERM_CallParamList
    | NONTERM_DefParamList
    | NONTERM_FunctionLine
    | NONTERM_FunctionCallLine
    | NONTERM_OpenLine
    | NONTERM_ForLine
    | NONTERM_IntList
    | NONTERM_PartItemList
    | NONTERM_ItemList
    | NONTERM_CutLine
    | NONTERM_RID
    | NONTERM_RoughageLocus
    | NONTERM_RoughageMarkerMaybe
    | NONTERM_RoughageElement
    | NONTERM_RoughageElementList
    | NONTERM_RoughageLine
    | NONTERM_RoughageLineList
    | NONTERM_L2IdWrap
    | NONTERM_L2Id
    | NONTERM_L2Locus
    | NONTERM_L2ExpElement
    | NONTERM_L2ExpElementList
    | NONTERM_L2ExpLine
    | NONTERM_L2
    | NONTERM_Line
    | NONTERM_LineList

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | LPAREN  -> 0 
  | RPAREN  -> 1 
  | PLUS  -> 2 
  | NEWLINE  -> 3 
  | EOF  -> 4 
  | MARKER  -> 5 
  | DOUBLEQUOTE  -> 6 
  | START_ROUGHAGE  -> 7 
  | END_ROUGHAGE  -> 8 
  | GREATERTHAN  -> 9 
  | LESSTHAN  -> 10 
  | DOT  -> 11 
  | LET  -> 12 
  | CUT  -> 13 
  | DEF  -> 14 
  | END  -> 15 
  | OPEN  -> 16 
  | FOR  -> 17 
  | IN  -> 18 
  | DO  -> 19 
  | COLON  -> 20 
  | STAR  -> 21 
  | SLASH  -> 22 
  | AT  -> 23 
  | LBRACE  -> 24 
  | RBRACE  -> 25 
  | EXCLM  -> 26 
  | EQUALS  -> 27 
  | CARAT  -> 28 
  | COMMA  -> 29 
  | HYPHEN  -> 30 
  | TILDE  -> 31 
  | OPENSQBRACKET  -> 32 
  | DOLLAR  -> 33 
  | CLOSESQBRACKET  -> 34 
  | SEMICOLON  -> 35 
  | PNAME _ -> 36 
  | PVALUE _ -> 37 
  | ERROR _ -> 38 
  | DNAMUTATION _ -> 39 
  | AAMUTATION _ -> 40 
  | LINKER _ -> 41 
  | QUOTED_STRING _ -> 42 
  | DOCSTRING _ -> 43 
  | STRING _ -> 44 
  | INT _ -> 45 
  | ID _ -> 46 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_LPAREN 
  | 1 -> TOKEN_RPAREN 
  | 2 -> TOKEN_PLUS 
  | 3 -> TOKEN_NEWLINE 
  | 4 -> TOKEN_EOF 
  | 5 -> TOKEN_MARKER 
  | 6 -> TOKEN_DOUBLEQUOTE 
  | 7 -> TOKEN_START_ROUGHAGE 
  | 8 -> TOKEN_END_ROUGHAGE 
  | 9 -> TOKEN_GREATERTHAN 
  | 10 -> TOKEN_LESSTHAN 
  | 11 -> TOKEN_DOT 
  | 12 -> TOKEN_LET 
  | 13 -> TOKEN_CUT 
  | 14 -> TOKEN_DEF 
  | 15 -> TOKEN_END 
  | 16 -> TOKEN_OPEN 
  | 17 -> TOKEN_FOR 
  | 18 -> TOKEN_IN 
  | 19 -> TOKEN_DO 
  | 20 -> TOKEN_COLON 
  | 21 -> TOKEN_STAR 
  | 22 -> TOKEN_SLASH 
  | 23 -> TOKEN_AT 
  | 24 -> TOKEN_LBRACE 
  | 25 -> TOKEN_RBRACE 
  | 26 -> TOKEN_EXCLM 
  | 27 -> TOKEN_EQUALS 
  | 28 -> TOKEN_CARAT 
  | 29 -> TOKEN_COMMA 
  | 30 -> TOKEN_HYPHEN 
  | 31 -> TOKEN_TILDE 
  | 32 -> TOKEN_OPENSQBRACKET 
  | 33 -> TOKEN_DOLLAR 
  | 34 -> TOKEN_CLOSESQBRACKET 
  | 35 -> TOKEN_SEMICOLON 
  | 36 -> TOKEN_PNAME 
  | 37 -> TOKEN_PVALUE 
  | 38 -> TOKEN_ERROR 
  | 39 -> TOKEN_DNAMUTATION 
  | 40 -> TOKEN_AAMUTATION 
  | 41 -> TOKEN_LINKER 
  | 42 -> TOKEN_QUOTED_STRING 
  | 43 -> TOKEN_DOCSTRING 
  | 44 -> TOKEN_STRING 
  | 45 -> TOKEN_INT 
  | 46 -> TOKEN_ID 
  | 49 -> TOKEN_end_of_input
  | 47 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_Final 
    | 3 -> NONTERM_Final 
    | 4 -> NONTERM_HetBlock 
    | 5 -> NONTERM_cExp 
    | 6 -> NONTERM_cExp 
    | 7 -> NONTERM_cExp 
    | 8 -> NONTERM_cExp 
    | 9 -> NONTERM_cExp 
    | 10 -> NONTERM_cExp 
    | 11 -> NONTERM_cExp 
    | 12 -> NONTERM_cExp 
    | 13 -> NONTERM_RelPos1 
    | 14 -> NONTERM_RelPos1 
    | 15 -> NONTERM_RelPos2 
    | 16 -> NONTERM_RelPos2 
    | 17 -> NONTERM_Slice 
    | 18 -> NONTERM_Slice 
    | 19 -> NONTERM_Slice 
    | 20 -> NONTERM_Slice 
    | 21 -> NONTERM_Mutation 
    | 22 -> NONTERM_Mutation 
    | 23 -> NONTERM_Mod 
    | 24 -> NONTERM_Mod 
    | 25 -> NONTERM_Mod 
    | 26 -> NONTERM_ModList 
    | 27 -> NONTERM_ModList 
    | 28 -> NONTERM_Linker 
    | 29 -> NONTERM_SubPart 
    | 30 -> NONTERM_SubPart 
    | 31 -> NONTERM_Part 
    | 32 -> NONTERM_Part 
    | 33 -> NONTERM_Part 
    | 34 -> NONTERM_Part 
    | 35 -> NONTERM_Part 
    | 36 -> NONTERM_Part 
    | 37 -> NONTERM_Part 
    | 38 -> NONTERM_Part 
    | 39 -> NONTERM_Part 
    | 40 -> NONTERM_Part 
    | 41 -> NONTERM_Part 
    | 42 -> NONTERM_PragmaValues 
    | 43 -> NONTERM_PragmaValues 
    | 44 -> NONTERM_Pragma 
    | 45 -> NONTERM_Pragma 
    | 46 -> NONTERM_Pragmas 
    | 47 -> NONTERM_Pragmas 
    | 48 -> NONTERM_InlinePragmas 
    | 49 -> NONTERM_InlinePragmas 
    | 50 -> NONTERM_PartMaybePragma 
    | 51 -> NONTERM_PartMaybePragma 
    | 52 -> NONTERM_PartFwdRev 
    | 53 -> NONTERM_PartFwdRev 
    | 54 -> NONTERM_PartList 
    | 55 -> NONTERM_PartList 
    | 56 -> NONTERM_PartList 
    | 57 -> NONTERM_Assembly 
    | 58 -> NONTERM_Assembly 
    | 59 -> NONTERM_DocstringSection 
    | 60 -> NONTERM_DocstringSection 
    | 61 -> NONTERM_GSLVarsCommaSep 
    | 62 -> NONTERM_GSLVarsCommaSep 
    | 63 -> NONTERM_GSLVarsCommaSep 
    | 64 -> NONTERM_AliasLine 
    | 65 -> NONTERM_GSLVar 
    | 66 -> NONTERM_GSLVar 
    | 67 -> NONTERM_GSLVar 
    | 68 -> NONTERM_GSLVar 
    | 69 -> NONTERM_GSLVar 
    | 70 -> NONTERM_GSLVar 
    | 71 -> NONTERM_CallParamList 
    | 72 -> NONTERM_CallParamList 
    | 73 -> NONTERM_DefParamList 
    | 74 -> NONTERM_DefParamList 
    | 75 -> NONTERM_FunctionLine 
    | 76 -> NONTERM_FunctionCallLine 
    | 77 -> NONTERM_OpenLine 
    | 78 -> NONTERM_ForLine 
    | 79 -> NONTERM_IntList 
    | 80 -> NONTERM_IntList 
    | 81 -> NONTERM_IntList 
    | 82 -> NONTERM_IntList 
    | 83 -> NONTERM_PartItemList 
    | 84 -> NONTERM_PartItemList 
    | 85 -> NONTERM_ItemList 
    | 86 -> NONTERM_ItemList 
    | 87 -> NONTERM_CutLine 
    | 88 -> NONTERM_RID 
    | 89 -> NONTERM_RID 
    | 90 -> NONTERM_RoughageLocus 
    | 91 -> NONTERM_RoughageLocus 
    | 92 -> NONTERM_RoughageMarkerMaybe 
    | 93 -> NONTERM_RoughageMarkerMaybe 
    | 94 -> NONTERM_RoughageElement 
    | 95 -> NONTERM_RoughageElement 
    | 96 -> NONTERM_RoughageElementList 
    | 97 -> NONTERM_RoughageElementList 
    | 98 -> NONTERM_RoughageLine 
    | 99 -> NONTERM_RoughageLine 
    | 100 -> NONTERM_RoughageLine 
    | 101 -> NONTERM_RoughageLineList 
    | 102 -> NONTERM_RoughageLineList 
    | 103 -> NONTERM_RoughageLineList 
    | 104 -> NONTERM_RoughageLineList 
    | 105 -> NONTERM_L2IdWrap 
    | 106 -> NONTERM_L2IdWrap 
    | 107 -> NONTERM_L2Id 
    | 108 -> NONTERM_L2Id 
    | 109 -> NONTERM_L2Locus 
    | 110 -> NONTERM_L2ExpElement 
    | 111 -> NONTERM_L2ExpElementList 
    | 112 -> NONTERM_L2ExpElementList 
    | 113 -> NONTERM_L2ExpLine 
    | 114 -> NONTERM_L2ExpLine 
    | 115 -> NONTERM_L2ExpLine 
    | 116 -> NONTERM_L2 
    | 117 -> NONTERM_Line 
    | 118 -> NONTERM_Line 
    | 119 -> NONTERM_Line 
    | 120 -> NONTERM_Line 
    | 121 -> NONTERM_Line 
    | 122 -> NONTERM_Line 
    | 123 -> NONTERM_Line 
    | 124 -> NONTERM_Line 
    | 125 -> NONTERM_Line 
    | 126 -> NONTERM_Line 
    | 127 -> NONTERM_Line 
    | 128 -> NONTERM_LineList 
    | 129 -> NONTERM_LineList 
    | 130 -> NONTERM_LineList 
    | 131 -> NONTERM_LineList 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 49 
let _fsyacc_tagOfErrorTerminal = 47

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | PLUS  -> "PLUS" 
  | NEWLINE  -> "NEWLINE" 
  | EOF  -> "EOF" 
  | MARKER  -> "MARKER" 
  | DOUBLEQUOTE  -> "DOUBLEQUOTE" 
  | START_ROUGHAGE  -> "START_ROUGHAGE" 
  | END_ROUGHAGE  -> "END_ROUGHAGE" 
  | GREATERTHAN  -> "GREATERTHAN" 
  | LESSTHAN  -> "LESSTHAN" 
  | DOT  -> "DOT" 
  | LET  -> "LET" 
  | CUT  -> "CUT" 
  | DEF  -> "DEF" 
  | END  -> "END" 
  | OPEN  -> "OPEN" 
  | FOR  -> "FOR" 
  | IN  -> "IN" 
  | DO  -> "DO" 
  | COLON  -> "COLON" 
  | STAR  -> "STAR" 
  | SLASH  -> "SLASH" 
  | AT  -> "AT" 
  | LBRACE  -> "LBRACE" 
  | RBRACE  -> "RBRACE" 
  | EXCLM  -> "EXCLM" 
  | EQUALS  -> "EQUALS" 
  | CARAT  -> "CARAT" 
  | COMMA  -> "COMMA" 
  | HYPHEN  -> "HYPHEN" 
  | TILDE  -> "TILDE" 
  | OPENSQBRACKET  -> "OPENSQBRACKET" 
  | DOLLAR  -> "DOLLAR" 
  | CLOSESQBRACKET  -> "CLOSESQBRACKET" 
  | SEMICOLON  -> "SEMICOLON" 
  | PNAME _ -> "PNAME" 
  | PVALUE _ -> "PVALUE" 
  | ERROR _ -> "ERROR" 
  | DNAMUTATION _ -> "DNAMUTATION" 
  | AAMUTATION _ -> "AAMUTATION" 
  | LINKER _ -> "LINKER" 
  | QUOTED_STRING _ -> "QUOTED_STRING" 
  | DOCSTRING _ -> "DOCSTRING" 
  | STRING _ -> "STRING" 
  | INT _ -> "INT" 
  | ID _ -> "ID" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | NEWLINE  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | MARKER  -> (null : System.Object) 
  | DOUBLEQUOTE  -> (null : System.Object) 
  | START_ROUGHAGE  -> (null : System.Object) 
  | END_ROUGHAGE  -> (null : System.Object) 
  | GREATERTHAN  -> (null : System.Object) 
  | LESSTHAN  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | LET  -> (null : System.Object) 
  | CUT  -> (null : System.Object) 
  | DEF  -> (null : System.Object) 
  | END  -> (null : System.Object) 
  | OPEN  -> (null : System.Object) 
  | FOR  -> (null : System.Object) 
  | IN  -> (null : System.Object) 
  | DO  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | STAR  -> (null : System.Object) 
  | SLASH  -> (null : System.Object) 
  | AT  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | EXCLM  -> (null : System.Object) 
  | EQUALS  -> (null : System.Object) 
  | CARAT  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | HYPHEN  -> (null : System.Object) 
  | TILDE  -> (null : System.Object) 
  | OPENSQBRACKET  -> (null : System.Object) 
  | DOLLAR  -> (null : System.Object) 
  | CLOSESQBRACKET  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | PNAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | PVALUE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ERROR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DNAMUTATION _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | AAMUTATION _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LINKER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | QUOTED_STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DOCSTRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 16us; 65535us; 0us; 74us; 56us; 74us; 90us; 74us; 95us; 74us; 102us; 74us; 108us; 74us; 115us; 74us; 118us; 74us; 126us; 74us; 129us; 74us; 138us; 74us; 150us; 74us; 152us; 74us; 157us; 74us; 226us; 74us; 227us; 74us; 12us; 65535us; 18us; 10us; 19us; 11us; 20us; 12us; 21us; 13us; 22us; 14us; 23us; 15us; 27us; 16us; 29us; 17us; 32us; 16us; 34us; 17us; 37us; 17us; 40us; 17us; 2us; 65535us; 27us; 28us; 32us; 33us; 4us; 65535us; 29us; 30us; 34us; 35us; 37us; 38us; 40us; 41us; 5us; 65535us; 50us; 46us; 51us; 46us; 54us; 46us; 55us; 46us; 76us; 46us; 5us; 65535us; 50us; 45us; 51us; 45us; 54us; 45us; 55us; 45us; 76us; 45us; 5us; 65535us; 50us; 52us; 51us; 52us; 54us; 49us; 55us; 49us; 76us; 49us; 3us; 65535us; 54us; 50us; 55us; 50us; 76us; 51us; 16us; 65535us; 0us; 59us; 56us; 59us; 90us; 59us; 95us; 59us; 102us; 59us; 108us; 59us; 115us; 59us; 118us; 59us; 126us; 59us; 129us; 59us; 138us; 59us; 150us; 59us; 152us; 59us; 157us; 59us; 226us; 59us; 227us; 59us; 17us; 65535us; 0us; 62us; 56us; 62us; 60us; 61us; 90us; 62us; 95us; 62us; 102us; 62us; 108us; 62us; 115us; 62us; 118us; 62us; 126us; 62us; 129us; 62us; 138us; 62us; 150us; 62us; 152us; 62us; 157us; 62us; 226us; 62us; 227us; 62us; 16us; 65535us; 0us; 87us; 56us; 87us; 90us; 87us; 95us; 87us; 102us; 87us; 108us; 87us; 115us; 87us; 118us; 87us; 126us; 87us; 129us; 87us; 138us; 87us; 150us; 149us; 152us; 149us; 157us; 87us; 226us; 87us; 227us; 87us; 2us; 65535us; 77us; 78us; 79us; 80us; 7us; 65535us; 0us; 218us; 81us; 81us; 83us; 81us; 126us; 218us; 138us; 218us; 226us; 218us; 227us; 218us; 2us; 65535us; 81us; 82us; 83us; 84us; 2us; 65535us; 85us; 86us; 87us; 88us; 14us; 65535us; 0us; 89us; 56us; 89us; 90us; 91us; 95us; 89us; 102us; 89us; 108us; 89us; 115us; 89us; 118us; 89us; 126us; 89us; 129us; 89us; 138us; 89us; 157us; 89us; 226us; 89us; 227us; 89us; 13us; 65535us; 0us; 92us; 56us; 92us; 95us; 96us; 102us; 93us; 108us; 93us; 115us; 93us; 118us; 117us; 126us; 92us; 129us; 117us; 138us; 92us; 157us; 92us; 226us; 92us; 227us; 92us; 10us; 65535us; 0us; 94us; 56us; 94us; 102us; 94us; 108us; 94us; 115us; 94us; 126us; 94us; 138us; 94us; 157us; 94us; 226us; 94us; 227us; 94us; 10us; 65535us; 0us; 212us; 56us; 57us; 102us; 110us; 108us; 110us; 115us; 110us; 126us; 212us; 138us; 212us; 157us; 158us; 226us; 212us; 227us; 212us; 6us; 65535us; 0us; 213us; 99us; 100us; 126us; 213us; 138us; 213us; 226us; 213us; 227us; 213us; 2us; 65535us; 102us; 103us; 115us; 116us; 5us; 65535us; 0us; 220us; 126us; 220us; 138us; 220us; 226us; 220us; 227us; 220us; 3us; 65535us; 102us; 101us; 108us; 109us; 115us; 101us; 2us; 65535us; 118us; 119us; 129us; 130us; 2us; 65535us; 121us; 122us; 123us; 124us; 5us; 65535us; 0us; 221us; 126us; 221us; 138us; 221us; 226us; 221us; 227us; 221us; 5us; 65535us; 0us; 222us; 126us; 222us; 138us; 222us; 226us; 222us; 227us; 222us; 5us; 65535us; 0us; 225us; 126us; 225us; 138us; 225us; 226us; 225us; 227us; 225us; 5us; 65535us; 0us; 224us; 126us; 224us; 138us; 224us; 226us; 224us; 227us; 224us; 3us; 65535us; 145us; 146us; 147us; 148us; 152us; 153us; 2us; 65535us; 150us; 151us; 152us; 155us; 1us; 65535us; 136us; 137us; 5us; 65535us; 0us; 223us; 126us; 223us; 138us; 223us; 226us; 223us; 227us; 223us; 11us; 65535us; 164us; 165us; 167us; 168us; 171us; 172us; 174us; 175us; 176us; 177us; 178us; 179us; 183us; 170us; 187us; 170us; 190us; 162us; 191us; 162us; 215us; 162us; 3us; 65535us; 190us; 185us; 191us; 185us; 215us; 185us; 2us; 65535us; 172us; 173us; 179us; 180us; 5us; 65535us; 183us; 181us; 187us; 181us; 190us; 181us; 191us; 181us; 215us; 181us; 5us; 65535us; 183us; 184us; 187us; 188us; 190us; 189us; 191us; 189us; 215us; 189us; 3us; 65535us; 190us; 190us; 191us; 190us; 215us; 190us; 3us; 65535us; 190us; 193us; 191us; 192us; 215us; 216us; 9us; 65535us; 0us; 196us; 126us; 196us; 138us; 196us; 197us; 198us; 202us; 196us; 205us; 196us; 208us; 196us; 226us; 196us; 227us; 196us; 8us; 65535us; 0us; 199us; 126us; 199us; 138us; 199us; 202us; 203us; 205us; 201us; 208us; 201us; 226us; 199us; 227us; 199us; 5us; 65535us; 0us; 207us; 126us; 207us; 138us; 207us; 226us; 207us; 227us; 207us; 7us; 65535us; 0us; 204us; 126us; 204us; 138us; 204us; 205us; 204us; 208us; 204us; 226us; 204us; 227us; 204us; 7us; 65535us; 0us; 210us; 126us; 210us; 138us; 210us; 205us; 206us; 208us; 209us; 226us; 210us; 227us; 210us; 5us; 65535us; 0us; 211us; 126us; 211us; 138us; 211us; 226us; 211us; 227us; 211us; 5us; 65535us; 0us; 214us; 126us; 214us; 138us; 214us; 226us; 214us; 227us; 214us; 5us; 65535us; 0us; 226us; 126us; 226us; 138us; 226us; 226us; 226us; 227us; 226us; 5us; 65535us; 0us; 3us; 126us; 127us; 138us; 139us; 226us; 229us; 227us; 228us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 22us; 35us; 38us; 43us; 49us; 55us; 61us; 65us; 82us; 100us; 117us; 120us; 128us; 131us; 134us; 149us; 163us; 174us; 185us; 192us; 195us; 201us; 205us; 208us; 211us; 217us; 223us; 229us; 235us; 239us; 242us; 244us; 250us; 262us; 266us; 269us; 275us; 281us; 285us; 289us; 299us; 308us; 314us; 322us; 330us; 336us; 342us; 348us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 2us; 1us; 2us; 1us; 3us; 1us; 4us; 1us; 5us; 1us; 6us; 1us; 6us; 5us; 7us; 7us; 8us; 9us; 10us; 5us; 7us; 8us; 8us; 9us; 10us; 5us; 7us; 8us; 9us; 9us; 10us; 5us; 7us; 8us; 9us; 10us; 10us; 5us; 7us; 8us; 9us; 10us; 11us; 5us; 7us; 8us; 9us; 10us; 12us; 6us; 7us; 8us; 9us; 10us; 13us; 14us; 6us; 7us; 8us; 9us; 10us; 15us; 16us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 11us; 1us; 12us; 1us; 12us; 1us; 14us; 1us; 16us; 4us; 17us; 18us; 19us; 20us; 2us; 17us; 19us; 2us; 17us; 19us; 1us; 17us; 1us; 17us; 2us; 18us; 20us; 2us; 18us; 20us; 2us; 18us; 20us; 1us; 18us; 1us; 18us; 1us; 19us; 1us; 19us; 1us; 19us; 1us; 20us; 1us; 20us; 1us; 20us; 1us; 21us; 1us; 22us; 1us; 23us; 1us; 24us; 1us; 25us; 1us; 25us; 1us; 26us; 2us; 27us; 30us; 2us; 27us; 41us; 1us; 27us; 1us; 28us; 2us; 29us; 30us; 4us; 29us; 30us; 76us; 105us; 1us; 31us; 1us; 31us; 1us; 31us; 1us; 32us; 1us; 32us; 1us; 32us; 1us; 33us; 1us; 34us; 4us; 35us; 36us; 37us; 38us; 1us; 35us; 1us; 35us; 3us; 36us; 37us; 38us; 2us; 36us; 37us; 1us; 36us; 1us; 37us; 1us; 37us; 1us; 38us; 1us; 38us; 1us; 39us; 2us; 40us; 41us; 2us; 40us; 41us; 2us; 42us; 43us; 1us; 42us; 2us; 44us; 45us; 1us; 44us; 2us; 46us; 47us; 1us; 47us; 2us; 48us; 49us; 2us; 48us; 49us; 2us; 48us; 49us; 1us; 49us; 2us; 50us; 51us; 1us; 50us; 1us; 52us; 1us; 53us; 1us; 53us; 1us; 54us; 2us; 54us; 65us; 4us; 55us; 56us; 57us; 58us; 2us; 55us; 56us; 1us; 55us; 1us; 56us; 1us; 57us; 2us; 59us; 60us; 1us; 60us; 2us; 61us; 62us; 1us; 61us; 1us; 61us; 1us; 62us; 1us; 63us; 2us; 64us; 75us; 2us; 64us; 75us; 1us; 64us; 1us; 64us; 1us; 66us; 2us; 67us; 69us; 1us; 68us; 1us; 69us; 1us; 69us; 1us; 70us; 1us; 70us; 2us; 71us; 72us; 1us; 72us; 1us; 72us; 2us; 73us; 74us; 1us; 74us; 1us; 74us; 1us; 75us; 1us; 75us; 1us; 75us; 1us; 75us; 1us; 75us; 1us; 75us; 1us; 76us; 1us; 76us; 1us; 76us; 1us; 77us; 1us; 77us; 1us; 78us; 1us; 78us; 1us; 78us; 1us; 78us; 1us; 78us; 1us; 78us; 1us; 78us; 4us; 79us; 80us; 81us; 82us; 2us; 80us; 81us; 2us; 80us; 81us; 2us; 80us; 81us; 1us; 81us; 1us; 81us; 1us; 82us; 1us; 82us; 2us; 83us; 84us; 1us; 84us; 1us; 84us; 2us; 85us; 86us; 1us; 85us; 1us; 85us; 1us; 86us; 1us; 86us; 1us; 87us; 1us; 87us; 2us; 88us; 89us; 1us; 89us; 1us; 89us; 4us; 90us; 91us; 94us; 95us; 2us; 90us; 91us; 1us; 91us; 1us; 91us; 1us; 91us; 1us; 92us; 1us; 92us; 1us; 92us; 2us; 94us; 95us; 1us; 94us; 1us; 94us; 1us; 94us; 1us; 95us; 1us; 95us; 1us; 95us; 1us; 95us; 1us; 95us; 1us; 95us; 1us; 95us; 2us; 96us; 97us; 1us; 97us; 1us; 97us; 1us; 97us; 2us; 98us; 99us; 1us; 99us; 1us; 99us; 1us; 99us; 1us; 100us; 2us; 101us; 104us; 2us; 102us; 103us; 1us; 102us; 1us; 104us; 1us; 105us; 1us; 106us; 2us; 107us; 108us; 1us; 108us; 1us; 108us; 2us; 109us; 110us; 1us; 109us; 1us; 110us; 1us; 110us; 1us; 110us; 2us; 111us; 112us; 1us; 112us; 1us; 112us; 2us; 113us; 114us; 1us; 114us; 1us; 114us; 1us; 115us; 1us; 116us; 1us; 117us; 1us; 118us; 1us; 119us; 1us; 120us; 1us; 120us; 1us; 120us; 1us; 121us; 1us; 121us; 1us; 122us; 1us; 123us; 1us; 124us; 1us; 125us; 1us; 126us; 1us; 127us; 2us; 128us; 131us; 2us; 129us; 130us; 1us; 130us; 1us; 131us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 16us; 18us; 20us; 26us; 32us; 38us; 44us; 50us; 56us; 63us; 70us; 72us; 74us; 76us; 78us; 80us; 82us; 84us; 86us; 88us; 93us; 96us; 99us; 101us; 103us; 106us; 109us; 112us; 114us; 116us; 118us; 120us; 122us; 124us; 126us; 128us; 130us; 132us; 134us; 136us; 138us; 140us; 142us; 145us; 148us; 150us; 152us; 155us; 160us; 162us; 164us; 166us; 168us; 170us; 172us; 174us; 176us; 181us; 183us; 185us; 189us; 192us; 194us; 196us; 198us; 200us; 202us; 204us; 207us; 210us; 213us; 215us; 218us; 220us; 223us; 225us; 228us; 231us; 234us; 236us; 239us; 241us; 243us; 245us; 247us; 249us; 252us; 257us; 260us; 262us; 264us; 266us; 269us; 271us; 274us; 276us; 278us; 280us; 282us; 285us; 288us; 290us; 292us; 294us; 297us; 299us; 301us; 303us; 305us; 307us; 310us; 312us; 314us; 317us; 319us; 321us; 323us; 325us; 327us; 329us; 331us; 333us; 335us; 337us; 339us; 341us; 343us; 345us; 347us; 349us; 351us; 353us; 355us; 357us; 362us; 365us; 368us; 371us; 373us; 375us; 377us; 379us; 382us; 384us; 386us; 389us; 391us; 393us; 395us; 397us; 399us; 401us; 404us; 406us; 408us; 413us; 416us; 418us; 420us; 422us; 424us; 426us; 428us; 431us; 433us; 435us; 437us; 439us; 441us; 443us; 445us; 447us; 449us; 451us; 454us; 456us; 458us; 460us; 463us; 465us; 467us; 469us; 471us; 474us; 477us; 479us; 481us; 483us; 485us; 488us; 490us; 492us; 495us; 497us; 499us; 501us; 503us; 506us; 508us; 510us; 513us; 515us; 517us; 519us; 521us; 523us; 525us; 527us; 529us; 531us; 533us; 535us; 537us; 539us; 541us; 543us; 545us; 547us; 549us; 552us; 555us; 557us; |]
let _fsyacc_action_rows = 230
let _fsyacc_actionTableElements = [|18us; 32768us; 0us; 56us; 3us; 227us; 4us; 5us; 5us; 63us; 7us; 215us; 12us; 106us; 13us; 157us; 16us; 132us; 17us; 134us; 22us; 64us; 23us; 75us; 26us; 90us; 31us; 6us; 36us; 79us; 41us; 53us; 43us; 99us; 44us; 195us; 46us; 55us; 0us; 49152us; 0us; 16385us; 1us; 32768us; 4us; 4us; 0us; 16386us; 0us; 16387us; 0us; 16388us; 0us; 16389us; 1us; 32768us; 46us; 9us; 0us; 16390us; 2us; 16391us; 21us; 20us; 22us; 21us; 2us; 16392us; 21us; 20us; 22us; 21us; 0us; 16393us; 0us; 16394us; 2us; 16395us; 21us; 20us; 22us; 21us; 5us; 32768us; 1us; 24us; 2us; 18us; 21us; 20us; 22us; 21us; 30us; 19us; 5us; 16397us; 2us; 18us; 21us; 20us; 22us; 21us; 30us; 19us; 46us; 25us; 5us; 16399us; 2us; 18us; 21us; 20us; 22us; 21us; 30us; 19us; 46us; 26us; 4us; 32768us; 0us; 23us; 23us; 8us; 30us; 22us; 45us; 7us; 4us; 32768us; 0us; 23us; 23us; 8us; 30us; 22us; 45us; 7us; 4us; 32768us; 0us; 23us; 23us; 8us; 30us; 22us; 45us; 7us; 4us; 32768us; 0us; 23us; 23us; 8us; 30us; 22us; 45us; 7us; 4us; 32768us; 0us; 23us; 23us; 8us; 30us; 22us; 45us; 7us; 4us; 32768us; 0us; 23us; 23us; 8us; 30us; 22us; 45us; 7us; 0us; 16396us; 0us; 16398us; 0us; 16400us; 5us; 32768us; 0us; 23us; 23us; 8us; 30us; 22us; 31us; 32us; 45us; 7us; 1us; 32768us; 20us; 29us; 5us; 32768us; 0us; 23us; 23us; 8us; 30us; 22us; 31us; 37us; 45us; 7us; 1us; 32768us; 34us; 31us; 0us; 16401us; 4us; 32768us; 0us; 23us; 23us; 8us; 30us; 22us; 45us; 7us; 1us; 32768us; 20us; 34us; 5us; 32768us; 0us; 23us; 23us; 8us; 30us; 22us; 31us; 40us; 45us; 7us; 1us; 32768us; 34us; 36us; 0us; 16402us; 4us; 32768us; 0us; 23us; 23us; 8us; 30us; 22us; 45us; 7us; 1us; 32768us; 34us; 39us; 0us; 16403us; 4us; 32768us; 0us; 23us; 23us; 8us; 30us; 22us; 45us; 7us; 1us; 32768us; 34us; 42us; 0us; 16404us; 0us; 16405us; 0us; 16406us; 0us; 16407us; 0us; 16408us; 1us; 32768us; 46us; 48us; 0us; 16409us; 0us; 16410us; 4us; 16414us; 11us; 47us; 32us; 27us; 39us; 43us; 40us; 44us; 4us; 16425us; 11us; 47us; 32us; 27us; 39us; 43us; 40us; 44us; 0us; 16411us; 0us; 16412us; 4us; 16413us; 11us; 47us; 32us; 27us; 39us; 43us; 40us; 44us; 7us; 16413us; 0us; 129us; 9us; 16489us; 11us; 47us; 28us; 16489us; 32us; 27us; 39us; 43us; 40us; 44us; 8us; 32768us; 0us; 56us; 5us; 63us; 22us; 64us; 23us; 75us; 26us; 90us; 31us; 6us; 41us; 53us; 46us; 54us; 1us; 32768us; 1us; 58us; 0us; 16415us; 1us; 32768us; 30us; 60us; 1us; 32768us; 46us; 54us; 0us; 16416us; 0us; 16417us; 0us; 16418us; 2us; 32768us; 33us; 67us; 46us; 65us; 1us; 32768us; 22us; 66us; 0us; 16419us; 2us; 32768us; 21us; 72us; 46us; 68us; 2us; 32768us; 21us; 70us; 22us; 69us; 0us; 16420us; 1us; 32768us; 22us; 71us; 0us; 16421us; 1us; 32768us; 22us; 73us; 0us; 16422us; 0us; 16423us; 1us; 32768us; 46us; 76us; 4us; 16424us; 11us; 47us; 32us; 27us; 39us; 43us; 40us; 44us; 1us; 16427us; 37us; 77us; 0us; 16426us; 1us; 16429us; 37us; 77us; 0us; 16428us; 1us; 16430us; 36us; 79us; 0us; 16431us; 1us; 32768us; 36us; 79us; 1us; 32768us; 25us; 85us; 1us; 16432us; 24us; 83us; 0us; 16433us; 1us; 16435us; 24us; 83us; 0us; 16434us; 0us; 16436us; 7us; 32768us; 0us; 56us; 5us; 63us; 22us; 64us; 23us; 75us; 31us; 6us; 41us; 53us; 46us; 54us; 0us; 16437us; 0us; 16438us; 0us; 16438us; 2us; 16442us; 3us; 98us; 35us; 95us; 9us; 32768us; 0us; 56us; 3us; 97us; 5us; 63us; 22us; 64us; 23us; 75us; 26us; 90us; 31us; 6us; 41us; 53us; 46us; 54us; 0us; 16439us; 0us; 16440us; 0us; 16441us; 1us; 16443us; 43us; 99us; 0us; 16444us; 2us; 32768us; 29us; 102us; 34us; 104us; 12us; 32768us; 0us; 56us; 5us; 63us; 22us; 64us; 23us; 75us; 26us; 90us; 31us; 6us; 32us; 115us; 34us; 105us; 41us; 53us; 44us; 112us; 45us; 111us; 46us; 54us; 0us; 16445us; 0us; 16446us; 0us; 16447us; 1us; 32768us; 46us; 107us; 2us; 32768us; 0us; 123us; 27us; 108us; 11us; 32768us; 0us; 56us; 5us; 63us; 22us; 64us; 23us; 75us; 26us; 90us; 31us; 6us; 32us; 115us; 41us; 53us; 44us; 112us; 45us; 111us; 46us; 54us; 0us; 16448us; 0us; 16450us; 1us; 16451us; 11us; 113us; 0us; 16452us; 1us; 32768us; 45us; 114us; 0us; 16453us; 12us; 32768us; 0us; 56us; 5us; 63us; 22us; 64us; 23us; 75us; 26us; 90us; 31us; 6us; 32us; 115us; 34us; 105us; 41us; 53us; 44us; 112us; 45us; 111us; 46us; 54us; 0us; 16454us; 1us; 16455us; 29us; 118us; 8us; 32768us; 0us; 56us; 5us; 63us; 22us; 64us; 23us; 75us; 26us; 90us; 31us; 6us; 41us; 53us; 46us; 54us; 0us; 16456us; 1us; 16457us; 29us; 121us; 1us; 32768us; 46us; 120us; 0us; 16458us; 1us; 32768us; 46us; 120us; 1us; 32768us; 1us; 125us; 1us; 32768us; 27us; 126us; 17us; 32768us; 0us; 56us; 3us; 227us; 5us; 63us; 7us; 215us; 12us; 106us; 13us; 157us; 16us; 132us; 17us; 134us; 22us; 64us; 23us; 75us; 26us; 90us; 31us; 6us; 36us; 79us; 41us; 53us; 43us; 99us; 44us; 195us; 46us; 55us; 1us; 32768us; 15us; 128us; 0us; 16459us; 8us; 32768us; 0us; 56us; 5us; 63us; 22us; 64us; 23us; 75us; 26us; 90us; 31us; 6us; 41us; 53us; 46us; 54us; 1us; 32768us; 1us; 131us; 0us; 16460us; 1us; 32768us; 46us; 133us; 0us; 16461us; 1us; 32768us; 46us; 135us; 1us; 32768us; 18us; 136us; 1us; 32768us; 32us; 152us; 1us; 32768us; 19us; 138us; 17us; 32768us; 0us; 56us; 3us; 227us; 5us; 63us; 7us; 215us; 12us; 106us; 13us; 157us; 16us; 132us; 17us; 134us; 22us; 64us; 23us; 75us; 26us; 90us; 31us; 6us; 36us; 79us; 41us; 53us; 43us; 99us; 44us; 195us; 46us; 55us; 1us; 32768us; 15us; 140us; 0us; 16462us; 2us; 16463us; 11us; 142us; 29us; 147us; 1us; 32768us; 11us; 143us; 1us; 32768us; 45us; 144us; 1us; 16464us; 29us; 145us; 1us; 32768us; 45us; 141us; 0us; 16465us; 1us; 32768us; 45us; 141us; 0us; 16466us; 1us; 16467us; 29us; 150us; 7us; 32768us; 0us; 56us; 5us; 63us; 22us; 64us; 23us; 75us; 31us; 6us; 41us; 53us; 46us; 54us; 0us; 16468us; 8us; 32768us; 0us; 56us; 5us; 63us; 22us; 64us; 23us; 75us; 31us; 6us; 41us; 53us; 45us; 141us; 46us; 54us; 1us; 32768us; 34us; 154us; 0us; 16469us; 1us; 32768us; 34us; 156us; 0us; 16470us; 8us; 32768us; 0us; 56us; 5us; 63us; 22us; 64us; 23us; 75us; 26us; 90us; 31us; 6us; 41us; 53us; 46us; 54us; 0us; 16471us; 1us; 16472us; 11us; 160us; 1us; 32768us; 46us; 161us; 0us; 16473us; 3us; 32768us; 9us; 171us; 10us; 174us; 28us; 163us; 1us; 16474us; 32us; 164us; 1us; 32768us; 46us; 159us; 1us; 32768us; 34us; 166us; 0us; 16475us; 1us; 32768us; 46us; 159us; 1us; 32768us; 34us; 169us; 0us; 16476us; 2us; 32768us; 9us; 171us; 10us; 174us; 1us; 32768us; 46us; 159us; 1us; 16477us; 32us; 167us; 0us; 16478us; 1us; 32768us; 46us; 159us; 1us; 32768us; 30us; 176us; 1us; 32768us; 46us; 159us; 1us; 32768us; 9us; 178us; 1us; 32768us; 46us; 159us; 1us; 16477us; 32us; 167us; 0us; 16479us; 1us; 16480us; 20us; 182us; 1us; 32768us; 20us; 183us; 1us; 32768us; 46us; 159us; 0us; 16481us; 1us; 16482us; 20us; 186us; 1us; 32768us; 20us; 187us; 1us; 32768us; 46us; 159us; 0us; 16483us; 0us; 16484us; 2us; 16485us; 3us; 191us; 46us; 159us; 2us; 16487us; 3us; 191us; 46us; 159us; 0us; 16486us; 0us; 16488us; 0us; 16489us; 0us; 16490us; 1us; 16491us; 11us; 197us; 2us; 32768us; 44us; 195us; 46us; 194us; 0us; 16492us; 2us; 32768us; 9us; 202us; 28us; 200us; 0us; 16493us; 1us; 32768us; 9us; 202us; 2us; 32768us; 44us; 195us; 46us; 194us; 0us; 16494us; 1us; 16495us; 35us; 205us; 2us; 32768us; 44us; 195us; 46us; 194us; 0us; 16496us; 1us; 16497us; 35us; 208us; 2us; 32768us; 44us; 195us; 46us; 194us; 0us; 16498us; 0us; 16499us; 0us; 16500us; 0us; 16501us; 0us; 16502us; 0us; 16503us; 2us; 32768us; 3us; 191us; 46us; 159us; 1us; 32768us; 8us; 217us; 0us; 16504us; 1us; 32768us; 3us; 219us; 0us; 16505us; 0us; 16506us; 0us; 16507us; 0us; 16508us; 0us; 16509us; 0us; 16510us; 0us; 16511us; 17us; 16512us; 0us; 56us; 3us; 227us; 5us; 63us; 7us; 215us; 12us; 106us; 13us; 157us; 16us; 132us; 17us; 134us; 22us; 64us; 23us; 75us; 26us; 90us; 31us; 6us; 36us; 79us; 41us; 53us; 43us; 99us; 44us; 195us; 46us; 55us; 17us; 16513us; 0us; 56us; 3us; 227us; 5us; 63us; 7us; 215us; 12us; 106us; 13us; 157us; 16us; 132us; 17us; 134us; 22us; 64us; 23us; 75us; 26us; 90us; 31us; 6us; 36us; 79us; 41us; 53us; 43us; 99us; 44us; 195us; 46us; 55us; 0us; 16514us; 0us; 16515us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 19us; 20us; 21us; 23us; 24us; 25us; 26us; 27us; 29us; 30us; 33us; 36us; 37us; 38us; 41us; 47us; 53us; 59us; 64us; 69us; 74us; 79us; 84us; 89us; 90us; 91us; 92us; 98us; 100us; 106us; 108us; 109us; 114us; 116us; 122us; 124us; 125us; 130us; 132us; 133us; 138us; 140us; 141us; 142us; 143us; 144us; 145us; 147us; 148us; 149us; 154us; 159us; 160us; 161us; 166us; 174us; 183us; 185us; 186us; 188us; 190us; 191us; 192us; 193us; 196us; 198us; 199us; 202us; 205us; 206us; 208us; 209us; 211us; 212us; 213us; 215us; 220us; 222us; 223us; 225us; 226us; 228us; 229us; 231us; 233us; 235us; 236us; 238us; 239us; 240us; 248us; 249us; 250us; 251us; 254us; 264us; 265us; 266us; 267us; 269us; 270us; 273us; 286us; 287us; 288us; 289us; 291us; 294us; 306us; 307us; 308us; 310us; 311us; 313us; 314us; 327us; 328us; 330us; 339us; 340us; 342us; 344us; 345us; 347us; 349us; 351us; 369us; 371us; 372us; 381us; 383us; 384us; 386us; 387us; 389us; 391us; 393us; 395us; 413us; 415us; 416us; 419us; 421us; 423us; 425us; 427us; 428us; 430us; 431us; 433us; 441us; 442us; 451us; 453us; 454us; 456us; 457us; 466us; 467us; 469us; 471us; 472us; 476us; 478us; 480us; 482us; 483us; 485us; 487us; 488us; 491us; 493us; 495us; 496us; 498us; 500us; 502us; 504us; 506us; 508us; 509us; 511us; 513us; 515us; 516us; 518us; 520us; 522us; 523us; 524us; 527us; 530us; 531us; 532us; 533us; 534us; 536us; 539us; 540us; 543us; 544us; 546us; 549us; 550us; 552us; 555us; 556us; 558us; 561us; 562us; 563us; 564us; 565us; 566us; 567us; 570us; 572us; 573us; 575us; 576us; 577us; 578us; 579us; 580us; 581us; 582us; 600us; 618us; 619us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 2us; 1us; 1us; 1us; 2us; 3us; 3us; 3us; 3us; 2us; 3us; 1us; 2us; 1us; 2us; 5us; 6us; 6us; 7us; 1us; 1us; 1us; 1us; 2us; 1us; 2us; 1us; 1us; 2us; 3us; 3us; 1us; 1us; 3us; 4us; 5us; 4us; 1us; 2us; 3us; 2us; 1us; 2us; 1us; 1us; 2us; 3us; 4us; 2us; 1us; 1us; 2us; 1us; 3us; 3us; 2us; 1us; 1us; 2us; 3us; 2us; 1us; 4us; 1us; 1us; 1us; 1us; 3us; 2us; 1us; 3us; 1us; 3us; 8us; 4us; 2us; 7us; 1us; 4us; 6us; 3us; 1us; 3us; 3us; 3us; 2us; 1us; 3us; 2us; 5us; 3us; 0us; 4us; 8us; 1us; 4us; 1us; 4us; 1us; 1us; 2us; 1us; 2us; 1us; 1us; 1us; 3us; 2us; 3us; 1us; 3us; 1us; 3us; 1us; 1us; 1us; 1us; 1us; 3us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 2us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 5us; 5us; 6us; 6us; 7us; 7us; 7us; 7us; 8us; 8us; 9us; 9us; 9us; 10us; 10us; 11us; 12us; 12us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 14us; 14us; 15us; 15us; 16us; 16us; 17us; 17us; 18us; 18us; 19us; 19us; 20us; 20us; 20us; 21us; 21us; 22us; 22us; 23us; 23us; 23us; 24us; 25us; 25us; 25us; 25us; 25us; 25us; 26us; 26us; 27us; 27us; 28us; 29us; 30us; 31us; 32us; 32us; 32us; 32us; 33us; 33us; 34us; 34us; 35us; 36us; 36us; 37us; 37us; 38us; 38us; 39us; 39us; 40us; 40us; 41us; 41us; 41us; 42us; 42us; 42us; 42us; 43us; 43us; 44us; 44us; 45us; 46us; 47us; 47us; 48us; 48us; 48us; 49us; 50us; 50us; 50us; 50us; 50us; 50us; 50us; 50us; 50us; 50us; 50us; 51us; 51us; 51us; 51us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 16385us; 65535us; 16386us; 16387us; 16388us; 16389us; 65535us; 16390us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16396us; 16398us; 16400us; 65535us; 65535us; 65535us; 65535us; 16401us; 65535us; 65535us; 65535us; 65535us; 16402us; 65535us; 65535us; 16403us; 65535us; 65535us; 16404us; 16405us; 16406us; 16407us; 16408us; 65535us; 16409us; 16410us; 65535us; 65535us; 16411us; 16412us; 65535us; 65535us; 65535us; 65535us; 16415us; 65535us; 65535us; 16416us; 16417us; 16418us; 65535us; 65535us; 16419us; 65535us; 65535us; 16420us; 65535us; 16421us; 65535us; 16422us; 16423us; 65535us; 65535us; 65535us; 16426us; 65535us; 16428us; 65535us; 16431us; 65535us; 65535us; 65535us; 16433us; 65535us; 16434us; 16436us; 65535us; 16437us; 16438us; 65535us; 65535us; 65535us; 16439us; 16440us; 16441us; 65535us; 16444us; 65535us; 65535us; 16445us; 16446us; 16447us; 65535us; 65535us; 65535us; 16448us; 16450us; 65535us; 16452us; 65535us; 16453us; 65535us; 16454us; 65535us; 65535us; 16456us; 65535us; 65535us; 16458us; 65535us; 65535us; 65535us; 65535us; 65535us; 16459us; 65535us; 65535us; 16460us; 65535us; 16461us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16462us; 65535us; 65535us; 65535us; 65535us; 65535us; 16465us; 65535us; 16466us; 65535us; 65535us; 16468us; 65535us; 65535us; 16469us; 65535us; 16470us; 65535us; 16471us; 65535us; 65535us; 16473us; 65535us; 65535us; 65535us; 65535us; 16475us; 65535us; 65535us; 16476us; 65535us; 65535us; 65535us; 16478us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16479us; 65535us; 65535us; 65535us; 16481us; 65535us; 65535us; 65535us; 16483us; 16484us; 65535us; 65535us; 16486us; 16488us; 16489us; 16490us; 65535us; 65535us; 16492us; 65535us; 16493us; 65535us; 65535us; 16494us; 65535us; 65535us; 16496us; 65535us; 65535us; 16498us; 16499us; 16500us; 16501us; 16502us; 16503us; 65535us; 65535us; 16504us; 65535us; 16505us; 16506us; 16507us; 16508us; 16509us; 16510us; 16511us; 65535us; 65535us; 16514us; 16515us; |]
let _fsyacc_reductions ()  =    [| 
# 561 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : GSLLine list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 570 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Final)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "gslyacc.fsy"
                                    _1 
                   )
# 76 "gslyacc.fsy"
                 : GSLLine list));
# 581 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'LineList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "gslyacc.fsy"
                                                          List.rev _1
                   )
# 79 "gslyacc.fsy"
                 : 'Final));
# 592 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "gslyacc.fsy"
                                                               []
                   )
# 80 "gslyacc.fsy"
                 : 'Final));
# 602 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "gslyacc.fsy"
                                                           HETBLOCK 
                   )
# 83 "gslyacc.fsy"
                 : 'HetBlock));
# 612 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "gslyacc.fsy"
                                                   _1 
                   )
# 86 "gslyacc.fsy"
                 : 'cExp));
# 623 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string*Position*Position)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "gslyacc.fsy"
                                                   let i,_(*s*),_(*e*) = _2 in
                                                   match aliases.TryGetValue(i) with
                                                       | true,v ->
                                                             match v with
                                                                 | GSLV_INT anInt -> anInt
                                                                 | _ as x -> failwithf "ERROR: variable %A ( is not an int) in variable %s" x i
                                                       | _ -> failwithf "ERROR: unable to find variable %s" i
                                                 
                   )
# 87 "gslyacc.fsy"
                 : 'cExp));
# 641 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'cExp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'cExp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "gslyacc.fsy"
                                                   _1 + _3 
                   )
# 95 "gslyacc.fsy"
                 : 'cExp));
# 653 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'cExp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'cExp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "gslyacc.fsy"
                                                   _1 - _3 
                   )
# 96 "gslyacc.fsy"
                 : 'cExp));
# 665 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'cExp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'cExp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "gslyacc.fsy"
                                                   _1 * _3 
                   )
# 97 "gslyacc.fsy"
                 : 'cExp));
# 677 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'cExp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'cExp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "gslyacc.fsy"
                                                   _1 / _3 
                   )
# 98 "gslyacc.fsy"
                 : 'cExp));
# 689 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'cExp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "gslyacc.fsy"
                                                      - _2 
                   )
# 99 "gslyacc.fsy"
                 : 'cExp));
# 700 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'cExp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "gslyacc.fsy"
                                                   _2 
                   )
# 100 "gslyacc.fsy"
                 : 'cExp));
# 711 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'cExp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "gslyacc.fsy"
                                   {x = _1 * 1<OneOffset> ; relTo = FIVEPRIME } 
                   )
# 103 "gslyacc.fsy"
                 : 'RelPos1));
# 722 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'cExp)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string*Position*Position)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "gslyacc.fsy"
                                     let i,_(*s*),_(*e*) = _2 in
                                     let i' = i.ToUpper() in
                                     match i' with | "S" -> { x= _1*1<OneOffset> ; relTo = FIVEPRIME}
                                                   | "E" -> { x= _1*1<OneOffset> ; relTo = THREEPRIME}
                                                   | "A" | "AS" | "SA" -> if _1 > 0 then { x = _1*3<OneOffset> - 2<OneOffset> ; relTo = FIVEPRIME } else failwithf "ERROR: Cannot begin with a negative amino acid offset"
                                                   | "AE" | "EA" -> if _1 > 0 then { x = _1*3<OneOffset> - 2<OneOffset> ; relTo = THREEPRIME } else { x = _1*3<OneOffset> ; relTo = THREEPRIME }
                                                   | _ -> failwithf "ERROR: relative position should be int,(a),(s/e)"
                                  
                   )
# 104 "gslyacc.fsy"
                 : 'RelPos1));
# 741 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'cExp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "gslyacc.fsy"
                                   {x = _1 * 1<OneOffset> ; relTo = FIVEPRIME } 
                   )
# 114 "gslyacc.fsy"
                 : 'RelPos2));
# 752 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'cExp)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string*Position*Position)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "gslyacc.fsy"
                                      let i,_(*s*),_(*e*) = _2 in
                                     let i' = i.ToUpper() in
                                     match i' with | "S" -> { x= _1*1<OneOffset> ; relTo = FIVEPRIME}
                                                   | "E" -> { x= _1*1<OneOffset> ; relTo = THREEPRIME}
                                                   | "A" | "AS" -> if _1 > 0 then { x= _1*3<OneOffset> ; relTo = FIVEPRIME }
                                                                   else failwithf "ERROR: Cannot offset negative amino acids from start"
                                                   | "AE" -> if _1 > 0 then
                                                                 { x= _1*3<OneOffset> ; relTo = THREEPRIME }
                                                             else { x = _1*3<OneOffset> + 2<OneOffset> ; relTo = THREEPRIME }
                                                   | _ -> failwithf "ERROR: relative position should be int,(a),(s/e)"
                                  
                   )
# 115 "gslyacc.fsy"
                 : 'RelPos2));
# 774 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'RelPos1)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'RelPos2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "gslyacc.fsy"
                                                                                {left = _2 ; right = _4 ; lApprox = false; rApprox=false } 
                   )
# 128 "gslyacc.fsy"
                 : 'Slice));
# 786 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'RelPos1)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'RelPos2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 129 "gslyacc.fsy"
                                                                                      {left = _3 ; right = _5 ; lApprox = true; rApprox=false} 
                   )
# 129 "gslyacc.fsy"
                 : 'Slice));
# 798 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'RelPos1)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'RelPos2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "gslyacc.fsy"
                                                                                      {left = _2 ; right = _5 ; lApprox = false; rApprox=true} 
                   )
# 130 "gslyacc.fsy"
                 : 'Slice));
# 810 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'RelPos1)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'RelPos2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "gslyacc.fsy"
                                                                                            {left = _3 ; right = _6; lApprox = true; rApprox=true } 
                   )
# 131 "gslyacc.fsy"
                 : 'Slice));
# 822 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "gslyacc.fsy"
                                                      { f = _1.[1] ; t = _1.[_1.Length-1]; pos = Convert.ToInt32(_1.[2.._1.Length-2]) ; mType = NT} 
                   )
# 136 "gslyacc.fsy"
                 : 'Mutation));
# 833 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "gslyacc.fsy"
                                                    { f = _1.[1] ; t = _1.[_1.Length-1]; pos = Convert.ToInt32(_1.[2.._1.Length-2]) ; mType = AA} 
                   )
# 137 "gslyacc.fsy"
                 : 'Mutation));
# 844 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Mutation)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "gslyacc.fsy"
                                                           MUTATION(_1) 
                   )
# 140 "gslyacc.fsy"
                 : 'Mod));
# 855 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Slice)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "gslyacc.fsy"
                                                           SLICE(_1) 
                   )
# 141 "gslyacc.fsy"
                 : 'Mod));
# 866 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string*Position*Position)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 "gslyacc.fsy"
                                      let i,s,e = _2 in DOTMOD({i=i;s=s;e=e}) 
                   )
# 142 "gslyacc.fsy"
                 : 'Mod));
# 877 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Mod)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "gslyacc.fsy"
                                                           [ _1 ] 
                   )
# 145 "gslyacc.fsy"
                 : 'ModList));
# 888 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ModList)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Mod)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 146 "gslyacc.fsy"
                                                           _2 :: _1 
                   )
# 146 "gslyacc.fsy"
                 : 'ModList));
# 900 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 148 "gslyacc.fsy"
                                                           match _1.Split([| '-' |]) with
                                                             | [| a;b;c |] -> {l1 = a ; l2 = b; orient = c}
                                                             | _ -> failwithf "ERROR: bad linker format '%s'\n" (_1)
                                                         
                   )
# 148 "gslyacc.fsy"
                 : 'Linker));
# 914 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string*Position*Position)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 153 "gslyacc.fsy"
                                                           let i,s,e = _1 in { gene=i ; mods = [] ; where = { sp = s ; ep = e} } 
                   )
# 153 "gslyacc.fsy"
                 : 'SubPart));
# 925 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string*Position*Position)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ModList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 154 "gslyacc.fsy"
                                                           let i,s,e = _1 in { gene=i ; mods = List.rev _2 ;  where = { sp = s ; ep = e } } 
                   )
# 154 "gslyacc.fsy"
                 : 'SubPart));
# 937 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Assembly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 158 "gslyacc.fsy"
                                                            match _2 with | ASSEMBLY(a) ->
                                                                             {part = MULTIPART(a.parts) ; pr = EmptyPragmas ; fwd = true}
                                                                          | _ -> failwithf "ERROR: unexpected non Assembly type %A in Part grammar rule" _2
                                                         
                   )
# 158 "gslyacc.fsy"
                 : 'Part));
# 951 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Linker)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'SubPart)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 162 "gslyacc.fsy"
                                                            {part = GENEPART ( { part = _3; linker = Some(_1) } ) ; pr = EmptyPragmas ; fwd=true} 
                   )
# 162 "gslyacc.fsy"
                 : 'Part));
# 963 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'SubPart)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 163 "gslyacc.fsy"
                                                            {part = GENEPART ( { part = _1; linker = None } ) ; pr = EmptyPragmas ; fwd=true}
                   )
# 163 "gslyacc.fsy"
                 : 'Part));
# 974 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 164 "gslyacc.fsy"
                                                            {part = MARKERPART ; pr = EmptyPragmas ; fwd=true}
                   )
# 164 "gslyacc.fsy"
                 : 'Part));
# 984 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string*Position*Position)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 165 "gslyacc.fsy"
                                                            let i,_(*s*),_(*e*) = _2 in {part = INLINEDNA(i.ToUpper()) ; pr = EmptyPragmas ; fwd=true }
                   )
# 165 "gslyacc.fsy"
                 : 'Part));
# 995 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string*Position*Position)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 166 "gslyacc.fsy"
                                                            let i,_(*s*),_(*e*) = _3 in {part = INLINEPROT(i.ToUpper()) ; pr = EmptyPragmas ; fwd=true} 
                   )
# 166 "gslyacc.fsy"
                 : 'Part));
# 1006 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string*Position*Position)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 167 "gslyacc.fsy"
                                                            let i,_(*s*),_(*e*) = _3 in {part = INLINEPROT(i.ToUpper()+"*") ; pr = EmptyPragmas ; fwd=true} 
                   )
# 167 "gslyacc.fsy"
                 : 'Part));
# 1017 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 168 "gslyacc.fsy"
                                                             {part = INLINEPROT("*") ; pr = EmptyPragmas ; fwd=true} 
                   )
# 168 "gslyacc.fsy"
                 : 'Part));
# 1027 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'HetBlock)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 169 "gslyacc.fsy"
                                                            {part= _1 ; pr = EmptyPragmas ; fwd=true} 
                   )
# 169 "gslyacc.fsy"
                 : 'Part));
# 1038 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string*Position*Position)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 170 "gslyacc.fsy"
                                                              let i,s,e = _2 in
                                                           let isAlias, res = aliases.TryGetValue i in
                                                           if isAlias then
                                                             match res with
                                                                 | GSLV_PPP(r) -> r
                                                                 | GSLV_ASSEM(a) -> // a is a PPP list
                                                                         let part = MULTIPART(a) in // Create multipart from PPP list
                                                                         let x = { part=part; pr= EmptyPragmas ; fwd = true} in  // Create a single PPP with a multipart inside
                                                                         x
                                                                 | _ -> failwithf "ERROR: unsupported gsl variable %A in @id expression" res
                                                           else
                                                             {part = PARTID({ id = i ; s = s ; e = e ; mods= []}) ; pr = EmptyPragmas ; fwd=true} 
                   )
# 170 "gslyacc.fsy"
                 : 'Part));
# 1060 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string*Position*Position)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ModList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 183 "gslyacc.fsy"
                                                              let i,s,e = _2 in let modList = _3 in stuffModList i s e modList aliases 
                   )
# 183 "gslyacc.fsy"
                 : 'Part));
# 1072 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'PragmaValues)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 186 "gslyacc.fsy"
                                              (aliasReplaceIn aliases _1)::_2 
                   )
# 186 "gslyacc.fsy"
                 : 'PragmaValues));
# 1084 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 187 "gslyacc.fsy"
                                [(aliasReplaceIn aliases _1)]
                   )
# 187 "gslyacc.fsy"
                 : 'PragmaValues));
# 1095 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'PragmaValues)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 190 "gslyacc.fsy"
                                             (buildPragma _1 _2) 
                   )
# 190 "gslyacc.fsy"
                 : 'Pragma));
# 1107 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 191 "gslyacc.fsy"
                                (buildPragma _1 []) 
                   )
# 191 "gslyacc.fsy"
                 : 'Pragma));
# 1118 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pragma)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 194 "gslyacc.fsy"
                                 [_1]
                   )
# 194 "gslyacc.fsy"
                 : 'Pragmas));
# 1129 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pragma)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pragmas)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 195 "gslyacc.fsy"
                                          _1::_2
                   )
# 195 "gslyacc.fsy"
                 : 'Pragmas));
# 1141 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pragmas)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 198 "gslyacc.fsy"
                                               _2
                   )
# 198 "gslyacc.fsy"
                 : 'InlinePragmas));
# 1152 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pragmas)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'InlinePragmas)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 199 "gslyacc.fsy"
                                                              _2@_4 
                   )
# 199 "gslyacc.fsy"
                 : 'InlinePragmas));
# 1164 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Part)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'InlinePragmas)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 203 "gslyacc.fsy"
                                                   addPragmas _1 _2 
                   )
# 203 "gslyacc.fsy"
                 : 'PartMaybePragma));
# 1176 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Part)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 204 "gslyacc.fsy"
                                                             _1 
                   )
# 204 "gslyacc.fsy"
                 : 'PartMaybePragma));
# 1187 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'PartMaybePragma)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 207 "gslyacc.fsy"
                                             _1 
                   )
# 207 "gslyacc.fsy"
                 : 'PartFwdRev));
# 1198 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'PartMaybePragma)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 208 "gslyacc.fsy"
                                                   { _2 with fwd = false} 
                   )
# 208 "gslyacc.fsy"
                 : 'PartFwdRev));
# 1209 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'PartFwdRev)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 211 "gslyacc.fsy"
                                                                 [_1] 
                   )
# 211 "gslyacc.fsy"
                 : 'PartList));
# 1220 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'PartList)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'PartFwdRev)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 212 "gslyacc.fsy"
                                                                 _3::_1 
                   )
# 212 "gslyacc.fsy"
                 : 'PartList));
# 1232 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'PartList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 213 "gslyacc.fsy"
                                                                 {part = ERRORPART({message = "Expected part after semicolon" ; s = parseState.InputStartPosition 3 ; e = parseState.InputEndPosition 3}) ; pr=EmptyPragmas ; fwd = true}::_1 
                   )
# 213 "gslyacc.fsy"
                 : 'PartList));
# 1243 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'PartList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 217 "gslyacc.fsy"
                                                           ASSEMBLY({ parts = List.rev _1 ; name = None ; uri = None; linkerHint = "" ; docStrings = [] ; pragmas=EmptyPragmas ; capabilities = Set.empty ; designParams = { targetTm = ryseLinkerTargetDefault ; seamlessTm = seamlessTargetDefault ; seamlessOverlapTm = seamlessOverlapTargetDefault;  pp = primercore.defaultParams; overlapParams = primercore.defaultParams ; overlapMinLen=overlapMinLenDefault} }) 
                   )
# 217 "gslyacc.fsy"
                 : 'Assembly));
# 1254 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'PartList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 218 "gslyacc.fsy"
                                                           ASSEMBLY({ parts = List.rev _1; name = None ; uri = None; linkerHint = "" ; docStrings = [] ; pragmas=EmptyPragmas ; capabilities = Set.empty ; designParams = { targetTm = ryseLinkerTargetDefault ; seamlessTm = seamlessTargetDefault  ; seamlessOverlapTm = seamlessOverlapTargetDefault; pp = primercore.defaultParams ; overlapParams = primercore.defaultParams ; overlapMinLen=overlapMinLenDefault} })  
                   )
# 218 "gslyacc.fsy"
                 : 'Assembly));
# 1265 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : IDLoc)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 222 "gslyacc.fsy"
                                                           [_1] 
                   )
# 222 "gslyacc.fsy"
                 : 'DocstringSection));
# 1276 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : IDLoc)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'DocstringSection)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 223 "gslyacc.fsy"
                                                        _1::_2 
                   )
# 223 "gslyacc.fsy"
                 : 'DocstringSection));
# 1288 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'GSLVar)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'GSLVarsCommaSep)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 226 "gslyacc.fsy"
                                                       _1::_3
                   )
# 226 "gslyacc.fsy"
                 : 'GSLVarsCommaSep));
# 1300 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'GSLVar)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 227 "gslyacc.fsy"
                                               [_1]
                   )
# 227 "gslyacc.fsy"
                 : 'GSLVarsCommaSep));
# 1311 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 228 "gslyacc.fsy"
                                        []
                   )
# 228 "gslyacc.fsy"
                 : 'GSLVarsCommaSep));
# 1321 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string*Position*Position)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'GSLVar)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 236 "gslyacc.fsy"
                                               let i,_(*s*),_(*e*) = _2 in (if (not ( aliases.ContainsKey(i))) then (aliases.Add(i,_4) |> ignore) else ((aliases.Remove(i) |> ignore); aliases.Add(i,_4) |> ignore) );
                                                           LETLINE({ varName=i ; letDefinition = _4}) 
                   )
# 236 "gslyacc.fsy"
                 : 'AliasLine));
# 1334 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'PartFwdRev)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 241 "gslyacc.fsy"
                                           GSLV_PPP(_1)
                   )
# 241 "gslyacc.fsy"
                 : 'GSLVar));
# 1345 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Assembly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 242 "gslyacc.fsy"
                                           match _1 with | ASSEMBLY(a) -> (match a.parts with | [single] -> GSLV_PPP(single) | _ -> GSLV_ASSEM(a.parts)) | _ -> failwithf "ERROR: bad assembly unpack"
                   )
# 242 "gslyacc.fsy"
                 : 'GSLVar));
# 1356 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 244 "gslyacc.fsy"
                                           GSLV_INT(_1)
                   )
# 244 "gslyacc.fsy"
                 : 'GSLVar));
# 1367 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : IDLoc)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 245 "gslyacc.fsy"
                                           GSLV_STR(_1)
                   )
# 245 "gslyacc.fsy"
                 : 'GSLVar));
# 1378 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 246 "gslyacc.fsy"
                                         GSLV_FLOAT(sprintf "%d.%d" _1 _3 |> float)
                   )
# 246 "gslyacc.fsy"
                 : 'GSLVar));
# 1390 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'GSLVarsCommaSep)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 247 "gslyacc.fsy"
                                                           GSLV_LIST(_2)
                   )
# 247 "gslyacc.fsy"
                 : 'GSLVar));
# 1401 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'PartFwdRev)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 250 "gslyacc.fsy"
                                                              [_1] 
                   )
# 250 "gslyacc.fsy"
                 : 'CallParamList));
# 1412 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'PartFwdRev)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'CallParamList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 251 "gslyacc.fsy"
                                                                 _1::_3 
                   )
# 251 "gslyacc.fsy"
                 : 'CallParamList));
# 1424 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string*Position*Position)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 255 "gslyacc.fsy"
                                let i,_(*s*),_(*e*) = _1 in [i] 
                   )
# 255 "gslyacc.fsy"
                 : 'DefParamList));
# 1435 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string*Position*Position)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'DefParamList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 256 "gslyacc.fsy"
                                                let i,_(*s*),_(*e*) = _1 in i::_3 
                   )
# 256 "gslyacc.fsy"
                 : 'DefParamList));
# 1447 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string*Position*Position)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'DefParamList)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'LineList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 259 "gslyacc.fsy"
                                                                                   let i,_(*s*),_(*e*) = _2 in GSLFUNCTION({ name = i; args = _4; body = List.rev _7 ; pragmas=EmptyPragmas})
                   )
# 259 "gslyacc.fsy"
                 : 'FunctionLine));
# 1460 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string*Position*Position)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'CallParamList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 262 "gslyacc.fsy"
                                                         let i,_(*s*),_ = _1 in GSLFUNCTIONCALL({name = i; args = _3 })
                   )
# 262 "gslyacc.fsy"
                 : 'FunctionCallLine));
# 1472 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string*Position*Position)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 266 "gslyacc.fsy"
                                  let i,_(*s*),_ = _2 in OPENLINE( { modulePath= i ; pragmas = EmptyPragmas} )
                   )
# 266 "gslyacc.fsy"
                 : 'OpenLine));
# 1483 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string*Position*Position)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'ItemList)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'LineList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 269 "gslyacc.fsy"
                                                             let i,_(*s*),_e = _2 in FORBLOCK( { varName = i ; items =_4 ; body = _6 ; pragmas = EmptyPragmas }) 
                   )
# 269 "gslyacc.fsy"
                 : 'ForLine));
# 1496 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 272 "gslyacc.fsy"
                              [ INTMEMBER(int _1) ] 
                   )
# 272 "gslyacc.fsy"
                 : 'IntList));
# 1507 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 273 "gslyacc.fsy"
                                          [ INTRANGE(int _1,int _4) ]
                   )
# 273 "gslyacc.fsy"
                 : 'IntList));
# 1519 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'IntList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 274 "gslyacc.fsy"
                                                         INTRANGE(int _1,int _4)::_6
                   )
# 274 "gslyacc.fsy"
                 : 'IntList));
# 1532 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'IntList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 275 "gslyacc.fsy"
                                            (INTMEMBER(int _1))::_3 
                   )
# 275 "gslyacc.fsy"
                 : 'IntList));
# 1544 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Part)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 278 "gslyacc.fsy"
                               [_1] 
                   )
# 278 "gslyacc.fsy"
                 : 'PartItemList));
# 1555 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Part)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'PartItemList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 279 "gslyacc.fsy"
                                                  _1::_3 
                   )
# 279 "gslyacc.fsy"
                 : 'PartItemList));
# 1567 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'IntList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 282 "gslyacc.fsy"
                                                               INTLIST (List.rev _2) 
                   )
# 282 "gslyacc.fsy"
                 : 'ItemList));
# 1578 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'PartItemList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 283 "gslyacc.fsy"
                                                                    PARTLIST(List.rev _2) 
                   )
# 283 "gslyacc.fsy"
                 : 'ItemList));
# 1589 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Assembly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 287 "gslyacc.fsy"
                                          CUTLine({assembly=_2 ; pragmas = EmptyPragmas}) 
                   )
# 287 "gslyacc.fsy"
                 : 'CutLine));
# 1600 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string*Position*Position)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 296 "gslyacc.fsy"
                                _1
                   )
# 296 "gslyacc.fsy"
                 : 'RID));
# 1611 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string*Position*Position)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string*Position*Position)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 297 "gslyacc.fsy"
                                       let i1,s1,_(*e_1*) = _1 in
                                             let i2,_(*s2*),e2 = _3 in
                                             (sprintf "%s.%s" i1 i2),s1,e2 
                   )
# 297 "gslyacc.fsy"
                 : 'RID));
# 1625 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'RID)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 302 "gslyacc.fsy"
                                         let i1,_(*s1*),_ = _1 in {locus = i1 ; marker = "" ; parts = [] } 
                   )
# 302 "gslyacc.fsy"
                 : 'RoughageLocus));
# 1636 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'RID)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'RID)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 303 "gslyacc.fsy"
                                                                           let i1,_(*s1*),_ = _1 in
                                                                         let i2,_(*s2*),_(*e2*) = _4 in
                                                                         { locus = i1 ; marker = i2 ; parts = [] } 
                   )
# 303 "gslyacc.fsy"
                 : 'RoughageLocus));
# 1650 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'RID)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 308 "gslyacc.fsy"
                                                              let i1,_(*s1*),_ = _2 in Some(i1) 
                   )
# 308 "gslyacc.fsy"
                 : 'RoughageMarkerMaybe));
# 1661 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 309 "gslyacc.fsy"
                             None 
                   )
# 309 "gslyacc.fsy"
                 : 'RoughageMarkerMaybe));
# 1671 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'RID)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'RID)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'RoughageMarkerMaybe)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 314 "gslyacc.fsy"
                                                                        let i1,s1,_ = _1 in
                                                                     let i2,_(*s2*),e2 = _3 in
                                                                     { promoter1 = i1 ; target1 = i2 ; promoter2=""; target2 = "" ; bi = false ; marker = _4 ; left = s1 ; right = e2}
                   )
# 314 "gslyacc.fsy"
                 : 'RoughageElement));
# 1686 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'RID)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'RID)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'RID)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'RID)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'RoughageMarkerMaybe)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 318 "gslyacc.fsy"
                                                                                             let i1,s1,_ = _1 in
                                                                                             let i2,_(*s2*),_ = _3 in
                                                                                             let i3,_(*s3*),_ = _5 in
                                                                                             let i4,_(*s4*),e4 = _7 in
                                                                                             {promoter1 = i2 ; target1 = i1 ; promoter2 = i3 ; target2 = i4 ; bi = true; marker = _8 ; left = s1 ; right=e4}
                   )
# 318 "gslyacc.fsy"
                 : 'RoughageElement));
# 1705 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'RoughageElement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 325 "gslyacc.fsy"
                                             [_1] 
                   )
# 325 "gslyacc.fsy"
                 : 'RoughageElementList));
# 1716 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'RoughageElement)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'RoughageElementList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 326 "gslyacc.fsy"
                                                                             _1::_4 
                   )
# 326 "gslyacc.fsy"
                 : 'RoughageElementList));
# 1728 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'RoughageLocus)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 329 "gslyacc.fsy"
                                                  _1 
                   )
# 329 "gslyacc.fsy"
                 : 'RoughageLine));
# 1739 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'RoughageLocus)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'RoughageElementList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 330 "gslyacc.fsy"
                                                                            { _1 with parts = _4} 
                   )
# 330 "gslyacc.fsy"
                 : 'RoughageLine));
# 1751 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'RoughageElementList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 331 "gslyacc.fsy"
                                                  { locus="" ; marker = "" ; parts = _1 } 
                   )
# 331 "gslyacc.fsy"
                 : 'RoughageLine));
# 1762 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'RoughageLine)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 334 "gslyacc.fsy"
                                                             [_1] 
                   )
# 334 "gslyacc.fsy"
                 : 'RoughageLineList));
# 1773 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'RoughageLineList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 335 "gslyacc.fsy"
                                                             _2 
                   )
# 335 "gslyacc.fsy"
                 : 'RoughageLineList));
# 1784 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 336 "gslyacc.fsy"
                                                           [] 
                   )
# 336 "gslyacc.fsy"
                 : 'RoughageLineList));
# 1794 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'RoughageLine)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'RoughageLineList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 337 "gslyacc.fsy"
                                                                      _1::_2 
                   )
# 337 "gslyacc.fsy"
                 : 'RoughageLineList));
# 1806 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string*Position*Position)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 347 "gslyacc.fsy"
                                   let i1,s1,e1 = _1  in { i = i1 ; s = s1 ; e = e1 } 
                   )
# 347 "gslyacc.fsy"
                 : 'L2IdWrap));
# 1817 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : IDLoc)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 348 "gslyacc.fsy"
                                    _1 
                   )
# 348 "gslyacc.fsy"
                 : 'L2IdWrap));
# 1828 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'L2IdWrap)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 358 "gslyacc.fsy"
                                       {prefix = None ; id = _1}   
                   )
# 358 "gslyacc.fsy"
                 : 'L2Id));
# 1839 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'L2IdWrap)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'L2IdWrap)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 359 "gslyacc.fsy"
                                                   { prefix = Some(_1) ; id = _3 } 
                   )
# 359 "gslyacc.fsy"
                 : 'L2Id));
# 1851 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'L2Id)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 363 "gslyacc.fsy"
                                          {l2Locus = Some(_1) ; parts = [] } 
                   )
# 363 "gslyacc.fsy"
                 : 'L2Locus));
# 1862 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'L2Id)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'L2Id)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 368 "gslyacc.fsy"
                                                     { promoter = _1 ; target = _3 ; s = _1.id.s ; e = _3.id.e}
                   )
# 368 "gslyacc.fsy"
                 : 'L2ExpElement));
# 1874 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'L2ExpElement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 372 "gslyacc.fsy"
                                          [_1] 
                   )
# 372 "gslyacc.fsy"
                 : 'L2ExpElementList));
# 1885 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'L2ExpElement)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'L2ExpElementList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 373 "gslyacc.fsy"
                                                                     _1::_3 
                   )
# 373 "gslyacc.fsy"
                 : 'L2ExpElementList));
# 1897 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'L2Locus)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 377 "gslyacc.fsy"
                                            _1 
                   )
# 377 "gslyacc.fsy"
                 : 'L2ExpLine));
# 1908 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'L2Locus)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'L2ExpElementList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 378 "gslyacc.fsy"
                                                                 { _1 with parts = _3} 
                   )
# 378 "gslyacc.fsy"
                 : 'L2ExpLine));
# 1920 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'L2ExpElementList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 379 "gslyacc.fsy"
                                               { l2Locus= None ; parts = _1 } 
                   )
# 379 "gslyacc.fsy"
                 : 'L2ExpLine));
# 1931 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'L2ExpLine)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 384 "gslyacc.fsy"
                                           L2( { l2Design = L2EXPLINE(_1) ; name = None ; uri = None; pragmas = EmptyPragmas ; capabilities = Set.empty} ) 
                   )
# 384 "gslyacc.fsy"
                 : 'L2));
# 1942 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Assembly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 390 "gslyacc.fsy"
                                                            _1 
                   )
# 390 "gslyacc.fsy"
                 : 'Line));
# 1953 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'DocstringSection)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 391 "gslyacc.fsy"
                                                         DOCSTRINGSECTION(_1 |>List.rev) 
                   )
# 391 "gslyacc.fsy"
                 : 'Line));
# 1964 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'L2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 392 "gslyacc.fsy"
                                       _1 
                   )
# 392 "gslyacc.fsy"
                 : 'Line));
# 1975 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'RoughageLineList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 393 "gslyacc.fsy"
                                                                            ROUGHAGESECTION( _2) 
                   )
# 393 "gslyacc.fsy"
                 : 'Line));
# 1986 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pragma)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 394 "gslyacc.fsy"
                                                            PRAGMA(_1) 
                   )
# 394 "gslyacc.fsy"
                 : 'Line));
# 1997 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'AliasLine)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 395 "gslyacc.fsy"
                                                            _1 
                   )
# 395 "gslyacc.fsy"
                 : 'Line));
# 2008 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'FunctionLine)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 396 "gslyacc.fsy"
                                                            _1 
                   )
# 396 "gslyacc.fsy"
                 : 'Line));
# 2019 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'FunctionCallLine)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 397 "gslyacc.fsy"
                                               _1 
                   )
# 397 "gslyacc.fsy"
                 : 'Line));
# 2030 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'CutLine)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 398 "gslyacc.fsy"
                                                            _1 
                   )
# 398 "gslyacc.fsy"
                 : 'Line));
# 2041 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ForLine)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 399 "gslyacc.fsy"
                                                            _1 
                   )
# 399 "gslyacc.fsy"
                 : 'Line));
# 2052 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'OpenLine)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 400 "gslyacc.fsy"
                                                            _1 
                   )
# 400 "gslyacc.fsy"
                 : 'Line));
# 2063 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Line)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 403 "gslyacc.fsy"
                                                             [_1] 
                   )
# 403 "gslyacc.fsy"
                 : 'LineList));
# 2074 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 404 "gslyacc.fsy"
                                                           [] 
                   )
# 404 "gslyacc.fsy"
                 : 'LineList));
# 2084 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'LineList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 405 "gslyacc.fsy"
                                                             _2 
                   )
# 405 "gslyacc.fsy"
                 : 'LineList));
# 2095 "gslyacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Line)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'LineList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 406 "gslyacc.fsy"
                                                              _2@[_1] 
                   )
# 406 "gslyacc.fsy"
                 : 'LineList));
|]
# 2108 "gslyacc.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 50;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : GSLLine list =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))

// Signature file for parser generated by fsyacc
module GSLParser
type token = 
  | LPAREN
  | RPAREN
  | PLUS
  | NEWLINE
  | EOF
  | MARKER
  | DOUBLEQUOTE
  | START_ROUGHAGE
  | END_ROUGHAGE
  | GREATERTHAN
  | LESSTHAN
  | DOT
  | LET
  | CUT
  | DEF
  | END
  | OPEN
  | FOR
  | IN
  | DO
  | COLON
  | STAR
  | SLASH
  | AT
  | LBRACE
  | RBRACE
  | EXCLM
  | EQUALS
  | CARAT
  | COMMA
  | HYPHEN
  | TILDE
  | OPENSQBRACKET
  | DOLLAR
  | CLOSESQBRACKET
  | SEMICOLON
  | PNAME of (string)
  | PVALUE of (string)
  | ERROR of (string)
  | DNAMUTATION of (string)
  | AAMUTATION of (string)
  | LINKER of (string)
  | QUOTED_STRING of (IDLoc)
  | DOCSTRING of (IDLoc)
  | STRING of (IDLoc)
  | INT of (int)
  | ID of (string*Position*Position)
type tokenId = 
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_PLUS
    | TOKEN_NEWLINE
    | TOKEN_EOF
    | TOKEN_MARKER
    | TOKEN_DOUBLEQUOTE
    | TOKEN_START_ROUGHAGE
    | TOKEN_END_ROUGHAGE
    | TOKEN_GREATERTHAN
    | TOKEN_LESSTHAN
    | TOKEN_DOT
    | TOKEN_LET
    | TOKEN_CUT
    | TOKEN_DEF
    | TOKEN_END
    | TOKEN_OPEN
    | TOKEN_FOR
    | TOKEN_IN
    | TOKEN_DO
    | TOKEN_COLON
    | TOKEN_STAR
    | TOKEN_SLASH
    | TOKEN_AT
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_EXCLM
    | TOKEN_EQUALS
    | TOKEN_CARAT
    | TOKEN_COMMA
    | TOKEN_HYPHEN
    | TOKEN_TILDE
    | TOKEN_OPENSQBRACKET
    | TOKEN_DOLLAR
    | TOKEN_CLOSESQBRACKET
    | TOKEN_SEMICOLON
    | TOKEN_PNAME
    | TOKEN_PVALUE
    | TOKEN_ERROR
    | TOKEN_DNAMUTATION
    | TOKEN_AAMUTATION
    | TOKEN_LINKER
    | TOKEN_QUOTED_STRING
    | TOKEN_DOCSTRING
    | TOKEN_STRING
    | TOKEN_INT
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_Final
    | NONTERM_HetBlock
    | NONTERM_cExp
    | NONTERM_RelPos1
    | NONTERM_RelPos2
    | NONTERM_Slice
    | NONTERM_Mutation
    | NONTERM_Mod
    | NONTERM_ModList
    | NONTERM_Linker
    | NONTERM_SubPart
    | NONTERM_Part
    | NONTERM_PragmaValues
    | NONTERM_Pragma
    | NONTERM_Pragmas
    | NONTERM_InlinePragmas
    | NONTERM_PartMaybePragma
    | NONTERM_PartFwdRev
    | NONTERM_PartList
    | NONTERM_Assembly
    | NONTERM_DocstringSection
    | NONTERM_GSLVarsCommaSep
    | NONTERM_AliasLine
    | NONTERM_GSLVar
    | NONTERM_CallParamList
    | NONTERM_DefParamList
    | NONTERM_FunctionLine
    | NONTERM_FunctionCallLine
    | NONTERM_OpenLine
    | NONTERM_ForLine
    | NONTERM_IntList
    | NONTERM_PartItemList
    | NONTERM_ItemList
    | NONTERM_CutLine
    | NONTERM_RID
    | NONTERM_RoughageLocus
    | NONTERM_RoughageMarkerMaybe
    | NONTERM_RoughageElement
    | NONTERM_RoughageElementList
    | NONTERM_RoughageLine
    | NONTERM_RoughageLineList
    | NONTERM_L2IdWrap
    | NONTERM_L2Id
    | NONTERM_L2Locus
    | NONTERM_L2ExpElement
    | NONTERM_L2ExpElementList
    | NONTERM_L2ExpLine
    | NONTERM_L2
    | NONTERM_Line
    | NONTERM_LineList
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> (GSLLine list) 
